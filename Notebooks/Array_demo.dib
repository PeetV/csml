#!markdown

# One dimensional arrays

#!markdown

##### Copy an array

#!csharp

double[] array1 = {3, 3, 2, 2, 1, 1};
double[] array2 = new double[array1.Length];
array1.CopyTo(array2, 0);
array2

#!markdown

##### Find the index of the first occurence of an item in an array

#!csharp

string[] array3 = {"a", "a", "b", "b", "c", "c"};
Array.IndexOf(array3, "b")

#!csharp

Array.IndexOf(array3, "x")

#!csharp

double[] array4 = {1.1, 2.2, 3.3};
Array.IndexOf(array4, 3.3)

#!markdown

##### Append to an array

#!csharp

array3.Append("x").ToArray()

#!markdown

##### Zip and sort two arrays

#!csharp

double[] array4 = {3, 3, 2, 2, 1, 1};
string[] array5 = {"a", "a", "b", "b", "c", "c"};
var zipped = array4.Zip(array5).OrderBy(x => x.First).ToArray();
zipped

#!markdown

##### Create an array from a range

#!csharp

Enumerable.Range(0, 10).ToArray()

#!markdown

##### Iterating through array

#!csharp

new int[] {1, 2}.All(x => array4.Contains(x))

#!csharp

new int[] {1, 2, 5}.All(x => array4.Contains(x))

#!markdown

# Two-dimensional arrays

#!csharp

// 2 rows and 3 columns
double[,] array6 = new double[2, 3];
array6

#!csharp

$"{array6.GetLength(0)}-{array6.GetLength(1)}"

#!csharp

array6 = new double[,] {{1, 2}, {3, 4}, {5, 6}};
$"{array6.GetLength(0)}-{array6.GetLength(1)}"

#!csharp

array6 = new double[,] {{1, 2, 3}, {4, 5, 6}};
$"{array6.GetLength(0)}-{array6.GetLength(1)}"

#!markdown

##### Get rows and columns

#!csharp

string[,] array7 = new string[,]{
    {"row1-col1", "row1-col2", "row1-col3"},
    {"row2-col1", "row2-col2", "row2-col3"},
    {"row3-col1", "row3-col2", "row3-col3"},
    {"row4-col1", "row4-col2", "row4-col3"}
};
$"{array7.GetLength(0)}-{array7.GetLength(1)}"

#!csharp

array7[0, 2]
