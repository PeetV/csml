#!markdown

# Binary Decision Tree

#!csharp

#i "nuget:/Users/peet/Sources/csml/CsML/bin/Release"
#r "nuget:CsML,*-*"

#!csharp

using CsML;

#!markdown

### Iris test data example

#!markdown

Load data.

#!csharp

var mapping = new Dictionary<int, Dictionary<string, double>>();
mapping[4] = new Dictionary<string, double>
{
    { "versicolor", 0 }, {"virginica", 1 }, {"setosa", 2}
};
string inpuPath = "/Users/peet/Sources/csml/Tests/Data/iris.csv";
double[,] data = CsML.Util.Matrix.FromCSV(inpuPath, mapping, loadFromRow: 1);

#!markdown

Extract features into a matrix and the target column into an array.

#!csharp

int dataLength = data.GetLength(0);
double[,] features = new double[dataLength, 4];
double[] target = new double[dataLength];
for (int r=0; r < data.GetLength(0); r++)
{
    for (int c=0; c < 4; c++)
    {
        features[r, c] = data[r, c];
    }
    target[r] = data[r, 4];
}

#!markdown

Shuffle the features matrix and target array and split into test and train sets.

#!csharp

(features, target) = CsML.Util.Features.Shuffle(features, target);
double[,] ftrain, ftest;
double[] ttrain, ttest;
((ftrain, ttrain), (ftest, ttest)) = CsML.Util.Features.Split(features, target, 0.8);

#!markdown

Train the model, get predictions from test data and calculate accuracy of predictions.

#!csharp

CsML.Tree.BinaryTree tree;
tree = new CsML.Tree.BinaryTree("classify", CsML.Util.Statistics.Gini);
tree.Train(ftrain, ttrain);
double[] predictions = tree.Predict(ftest);

#!markdown

Examine model metrics.

#!csharp

CsML.Util.Array.ClassificationAccuracy(ttest, predictions)

#!csharp

var revmapping = mapping[4].ToDictionary(x => x.Value, x => x.Key);
var strtest = ttest.Select(x => revmapping[x]).ToArray();
var strpred = predictions.Select(x => revmapping[x]).ToArray();
strpred[0..5]

#!csharp

CsML.Util.Array.ClassificationMetrics(strtest, strpred)

#!markdown

10 fold cross-validation.

#!csharp

List<double> results = new List<double>(){};
double[,] ftrain, test;
double[] ttrain, ttest;
var iter = new CsML.Util.KFoldIterator(150, 10);
foreach(bool[] f in iter)
{
    Console.Write(".");
    (ftrain, ftest) = CsML.Util.Matrix.Split(features, f);
    (ttrain, ttest) = CsML.Util.Array.Split(target, f);
    var tree = new CsML.Tree.BinaryTree("classify", CsML.Util.Statistics.Gini);
    tree.Train(ftrain, ttrain);
    double[] predictions = tree.Predict(ftest);
    results.Add(CsML.Util.Array.ClassificationAccuracy(ttest, predictions));
}
Console.WriteLine("");
Console.WriteLine(string.Join(",", results.ToArray()));
