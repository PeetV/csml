#!markdown

# ProbabilityMassFunction

#!csharp

#i "nuget:/Users/peet/Sources/csml/CsML/bin/Release"
#r "nuget:CsML,*-*"

#!csharp

using CsML;

#!markdown

### The Cookie Problem

See [Think Bayes](https://colab.research.google.com/github/AllenDowney/ThinkBayes2/blob/master/notebooks/chap02.ipynb).

#!csharp

var bowls = new CsML.Probability.ProbabilityMassFunction<string>(
    new string[]{"bowl 1", "bowl2"});
bowls.Update(new double[]{0.75, 0.5});
bowls.Normalise();
bowls.zipped

#!csharp

bowls.Update(new double[]{0.75, 0.5});
bowls.Update(new double[]{0.25, 0.5});
bowls.Normalise();
bowls.zipped

#!csharp

var bowls100 = new CsML.Probability.ProbabilityMassFunction<int>(
    Enumerable.Range(1, 101).ToArray()
);
bowls100[1]

#!csharp

#r "nuget: Plotly.NET.CSharp,*-*"

#!csharp

using Plotly.NET.CSharp;

#!csharp

void ShowChart() {
    Chart.Line<int, double, string>(
        x: bowls100.hypotheses, 
        y: bowls100.probabilities
    )
    .WithXAxisStyle<double, double, string>(Title: Plotly.NET.Title.init("Bowl"))
    .WithYAxisStyle<double, double, string>(Title: Plotly.NET.Title.init("Probability"))
.Show();
}
ShowChart()

#!csharp

var likelihoodVanilla = bowls100.hypotheses.Select(x => (double)x / 100.0).ToArray();
bowls100.Update(likelihoodVanilla);
bowls100.Normalise();
ShowChart()

#!csharp

var likelihoodVanilla = bowls100.hypotheses.Select(x => (double)x / 100.0).ToArray();
bowls100.Update(likelihoodVanilla);
bowls100.Normalise();
ShowChart()

#!csharp

var likelihoodChocolote = bowls100.hypotheses.Select(x => 1.0 - (double)x / 100.0).ToArray();
bowls100.Update(likelihoodChocolote);
bowls100.Normalise();
ShowChart()

#!csharp

bowls100.HighestProbability()

#!csharp

bowls100.SumProbabilities(10, 90)

#!markdown

### The Dice Problem

See [Think Bayes](https://colab.research.google.com/github/AllenDowney/ThinkBayes2/blob/master/notebooks/chap02.ipynb#scrollTo=r8czwqLOwuHU).

#!csharp

int[] hypos = new int[]{6, 8 , 12};
var dice = new CsML.Probability.ProbabilityMassFunction<int>(hypos);
double[] likelihoods = new double[]{1.0 / 6.0, 1.0 / 8.0, 1.0 / 12.0 };
dice.Update(likelihoods);
dice.Normalise();
dice.zipped

#!markdown

### The Trick Coin problem

Suppose you have two coins in a box. One is a normal coin with heads on one side and tails on the other, and one is a trick coin with heads on both sides. You choose a coin at random and see that one of the sides is heads. What is the probability that you chose the trick coin?

#!csharp

var coin = new CsML.Probability.ProbabilityMassFunction<string>(
    new string[]{"normal", "trick"});
coin.Update(new double[]{0.5, 1});
coin.Normalise();
coin.zipped
