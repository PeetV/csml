#!markdown

# ProbabilityMassFunction

#!csharp

#i "nuget:/Users/peet/Sources/csml/CsML/bin/Release"
#r "nuget:CsML,*-*"
using CsML;

#!csharp

#r "nuget: Plotly.NET.CSharp,*-*"
using Plotly.NET.CSharp;

#!markdown

### The Cookie Problem

See [Think Bayes](https://colab.research.google.com/github/AllenDowney/ThinkBayes2/blob/master/notebooks/chap02.ipynb).

#!csharp

var bowls = new CsML.Probability.ProbabilityMassFunction<string>(
    new string[]{"bowl 1", "bowl2"});
bowls.Update(new double[]{0.75, 0.5});
bowls.Normalise();
bowls.zipped

#!csharp

bowls.Update(new double[]{0.75, 0.5});
bowls.Update(new double[]{0.25, 0.5});
bowls.Normalise();
bowls.zipped

#!csharp

var bowls100 = new CsML.Probability.ProbabilityMassFunction<int>(
    Enumerable.Range(1, 101).ToArray()
);
bowls100[1]

#!csharp

double[] likelihoodVanilla = bowls100.hypotheses.Select(x => (double)x / 100.0).ToArray();
double[] likelihoodChocolote = bowls100.hypotheses.Select(x => 1.0 - (double)x / 100.0).ToArray();
bowls100.Update(likelihoodVanilla);
bowls100.Update(likelihoodVanilla);
bowls100.Update(likelihoodChocolote);
bowls100.Normalise();
Chart.Line<int, double, string>(
    x: bowls100.hypotheses, 
    y: bowls100.probabilities
)
.WithXAxisStyle<double, double, string>(Title: Plotly.NET.Title.init("Bowl"))
.WithYAxisStyle<double, double, string>(Title: Plotly.NET.Title.init("Probability"))
.Show();

#!csharp

bowls100.Max()

#!csharp

bowls100.SumProbabilities(10, 90)

#!markdown

### The Dice Problem

See [Think Bayes](https://colab.research.google.com/github/AllenDowney/ThinkBayes2/blob/master/notebooks/chap02.ipynb#scrollTo=r8czwqLOwuHU).

#!csharp

int[] hypos = new int[]{6, 8 , 12};
var dice = new CsML.Probability.ProbabilityMassFunction<int>(hypos);
double[] likelihoods = new double[]{1.0 / 6.0, 1.0 / 8.0, 1.0 / 12.0 };
dice.Update(likelihoods);
dice.Normalise();
dice.zipped

#!markdown

# Binomial distribution

The Binomial distribution is used to model the probability of the number of successes that occur during a number of experiments.

#!markdown

### Coin tosses

See [Think Bayes](http://allendowney.github.io/ThinkBayes2/chap04.html)

#!csharp

var ks = Enumerable.Range(1, 251).ToArray();
var pmf = CsML.Probability.ProbabilityMassFunction<int>.FromBinomial(250, ks, 0.5);
Chart.Line<int, double, string>(
    x: pmf.hypotheses, 
    y: pmf.probabilities
)
    .WithXAxisStyle<double, double, string>(
        Title: Plotly.NET.Title.init("Hypotheses"))
    .WithYAxisStyle<double, double, string>(
        Title: Plotly.NET.Title.init("Probability"))
    .Show();

#!csharp

pmf.Max()

#!csharp

double[] hypos = Enumerable.Range(0, 101).Select(x => (double)x / 100).ToArray();
var coinbal = new CsML.Probability.ProbabilityMassFunction<double>(hypos);
coinbal.zipped[0..3]

#!csharp

double[] likelihoodHeads = hypos;
double[] likelihoodTails = hypos.Select(x => 1 - x).ToArray();
likelihoodTails[0..3]

#!csharp

string[] data = Enumerable.Repeat("H", 140).Concat(Enumerable.Repeat("T", 110)).ToArray();
data[0..3]

#!csharp

foreach (var item in data)
{
    if (item == "H")
        coinbal.Update(likelihoodHeads);
    else coinbal.Update(likelihoodTails);
    coinbal.Normalise();
}
Chart.Line<double, double, string>(
    x: coinbal.hypotheses, 
    y: coinbal.probabilities
)
    .WithXAxisStyle<double, double, string>(
        Title: Plotly.NET.Title.init("Hypotheses"))
    .WithYAxisStyle<double, double, string>(
        Title: Plotly.NET.Title.init("Probability"))
    .Show();

#!markdown

### Gluten intolerance

See [Think Bayes](http://allendowney.github.io/ThinkBayes2/chap06.html)

#!csharp

var n = 35;
var num_sensitive = 10;
var num_insensitive = n - num_sensitive;

#!csharp

var pmf_sens = CsML.Probability
    .ProbabilityMassFunction<int>
    .FromBinomial(num_sensitive, Enumerable.Range(1, 35).ToArray(), 0.95);
Chart.Line<int, double, string>(
        x: pmf_sens.hypotheses, 
        y: pmf_sens.probabilities
    )
        .WithXAxisStyle<double, double, string>(
            Title: Plotly.NET.Title.init("Hypotheses"))
        .WithYAxisStyle<double, double, string>(
            Title: Plotly.NET.Title.init("Probability"))
        .Show();

#!csharp

var pmf_insens = CsML.Probability
    .ProbabilityMassFunction<int>
    .FromBinomial(num_insensitive, Enumerable.Range(1, 35).ToArray(), 0.4);
Chart.Line<int, double, string>(
        x: pmf_insens.hypotheses, 
        y: pmf_insens.probabilities
    )
        .WithXAxisStyle<double, double, string>(
            Title: Plotly.NET.Title.init("Hypotheses"))
        .WithYAxisStyle<double, double, string>(
            Title: Plotly.NET.Title.init("Probability"))
        .Show();

#!csharp

var pmf_gluten = pmf_sens.Add(pmf_insens);
Chart.Line<int, double, string>(
    x: pmf_gluten.hypotheses, 
    y: pmf_gluten.probabilities
)
    .WithXAxisStyle<double, double, string>(
        Title: Plotly.NET.Title.init("Hypotheses"))
    .WithYAxisStyle<double, double, string>(
        Title: Plotly.NET.Title.init("Probability"))
    .Show();
