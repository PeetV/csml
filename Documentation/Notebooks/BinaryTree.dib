#!markdown

# Binary Decision Tree

#!csharp

#i "nuget:/Users/peet/Sources/csml/CsML/bin/Release"
// #i "nuget:C:\Users\peet.vermeulen\source\repos\csml\CsML\bin\Release"
#r "nuget:CsML,*-*"
using CsML;

#!markdown

### Iris example

#!markdown

Load data:

#!csharp

var mapping = new Dictionary<int, Dictionary<string, double>>();
mapping[4] = new Dictionary<string, double>
{
    { "versicolor", 0 }, {"virginica", 1 }, {"setosa", 2}
};
string inputPath = "/Users/peet/Sources/csml/Tests/Data/iris.csv";
// string inputPath = @"C:\Users\peet.vermeulen\source\repos\csml\Tests\Data\iris.csv";
double[,] data = CsML.Util.Matrix.FromCSV(inputPath, mapping, loadFromRow: 1);

#!markdown

Extract features into a matrix and the target column into an array:

#!csharp

int dataLength = data.GetLength(0);
double[,] features = new double[dataLength, 4];
double[] target = new double[dataLength];
for (int r=0; r < data.GetLength(0); r++)
{
    for (int c=0; c < 4; c++)
    {
        features[r, c] = data[r, c];
    }
    target[r] = data[r, 4];
}

#!csharp

CsML.Util.Features.ClassProportions<double>(target)

#!csharp

var profiler = new CsML.Util.Features.Profiler(features, target);
profiler.NoOutliers(features)

#!markdown

Shuffle the features matrix and target array and split into test and train sets:

#!csharp

(features, target) = CsML.Util.Features.Shuffle(features, target);
double[,] ftrain, ftest;
double[] ttrain, ttest;
((ftrain, ttrain), (ftest, ttest)) = CsML.Util.Features.Split(features, target, 0.8);

#!csharp

CsML.Util.Features.ClassProportions<double>(ttrain)

#!csharp

CsML.Util.Features.ClassProportions<double>(ttest)

#!markdown

Train a random choice classifier for benchmarking:

#!csharp

CsML.Probability.RandomClassifier<double> rcfier;
rcfier = new CsML.Probability.RandomClassifier<double>();
rcfier.Train(ftrain, ttrain);
double[] predictions = rcfier.Predict(ftest);
CsML.Util.Array.ClassificationAccuracy(ttest, predictions)

#!markdown

Train the model, get predictions from test data and calculate accuracy of predictions:

#!csharp

CsML.Tree.BinaryTree tree;
tree = new CsML.Tree.BinaryTree("classify", CsML.Util.Statistics.Gini);
tree.Train(ftrain, ttrain);
predictions = tree.Predict(ftest);

#!markdown

Examine model metrics:

#!csharp

CsML.Util.Array.ClassificationAccuracy(ttest, predictions)

#!csharp

var revmapping = mapping[4].ToDictionary(x => x.Value, x => x.Key);
var strtest = ttest.Select(x => revmapping[x]).ToArray();
var strpred = predictions.Select(x => revmapping[x]).ToArray();
strpred[0..5]

#!csharp

CsML.Util.Array.ClassificationMetrics(strtest, strpred)

#!markdown

10 fold cross-validation:

#!csharp

List<double> results = new List<double>(){};
double[,] ftrain, test;
double[] ttrain, ttest;
var iter = new CsML.Util.KFoldIterator(150, 10);
foreach(bool[] f in iter)
{
    (ftrain, ftest) = CsML.Util.Matrix.Split(features, f);
    (ttrain, ttest) = CsML.Util.Array.Split(target, f);
    var tree = new CsML.Tree.BinaryTree("classify", CsML.Util.Statistics.Gini);
    tree.maxdepth = 15;
    tree.minrows = 3;
    tree.Train(ftrain, ttrain);
    double[] predictions = tree.Predict(ftest);
    results.Add(CsML.Util.Array.ClassificationAccuracy(ttest, predictions));
}
var mean = results.Average();
results = results.Select(x => Math.Round(x, 4)).ToList();
Console.WriteLine("");
Console.WriteLine(string.Join(", ", results.ToArray()));
Console.WriteLine($"Average {mean}");

#!markdown

### LED  example

#!csharp

inputPath = "/Users/peet/Sources/csml/Tests/Data/led7.csv";
// inputPath = @"C:\Users\peet.vermeulen\source\repos\csml\Tests\Data\led7.csv";
data = CsML.Util.Matrix.FromCSV(inputPath, null, loadFromRow: 1);

#!csharp

dataLength = data.GetLength(0);
features = new double[dataLength, 7];
target = new double[dataLength];
for (int r=0; r < data.GetLength(0); r++)
{
    for (int c=0; c < 7; c++)
    {
        features[r, c] = data[r, c];
    }
    target[r] = data[r, 7];
}

#!csharp

profiler = new CsML.Util.Features.Profiler(features, target);
profiler.NoOutliers(features)

#!csharp

(features, target) = CsML.Util.Features.Shuffle(features, target);

#!csharp

CsML.Util.Features.ClassProportions<double>(target)

#!csharp

results = new List<double>(){};
iter = new CsML.Util.KFoldIterator(dataLength, 10);
foreach(bool[] f in iter)
{    

    Console.Write(".");
    (ftrain, ftest) = CsML.Util.Matrix.Split(features, f);
    (ttrain, ttest) = CsML.Util.Array.Split(target, f);
    rcfier = new CsML.Probability.RandomClassifier<double>();
    rcfier.Train(ftrain, ttrain);
    double[] predictions = rcfier.Predict(ftest);
    results.Add(CsML.Util.Array.ClassificationAccuracy(ttest, predictions));
}
var mean = results.Average();
results = results.Select(x => Math.Round(x, 4)).ToList();
Console.WriteLine("");
Console.WriteLine(string.Join(", ", results.ToArray()));
Console.WriteLine($"Average {mean}");

#!csharp

results = new List<double>(){};
iter = new CsML.Util.KFoldIterator(dataLength, 10);
foreach(bool[] f in iter)
{
    Console.Write(".");
    (ftrain, ftest) = CsML.Util.Matrix.Split(features, f);
    (ttrain, ttest) = CsML.Util.Array.Split(target, f);
    var tree = new CsML.Tree.BinaryTree("classify", CsML.Util.Statistics.Gini);
    tree.maxdepth = 15;
    tree.minrows = 3;
    tree.Train(ftrain, ttrain);
    double[] predictions = tree.Predict(ftest);
    results.Add(CsML.Util.Array.ClassificationAccuracy(ttest, predictions));
}
var mean = results.Average();
results = results.Select(x => Math.Round(x, 4)).ToList();
Console.WriteLine("");
Console.WriteLine(string.Join(", ", results.ToArray()));
Console.WriteLine($"Average {mean}");

#!markdown

### Sonar example

#!csharp

mapping = new Dictionary<int, Dictionary<string, double>>();
mapping[60] = new Dictionary<string, double>{ { "R", 0 }, {"M", 1 }};
inputPath = "/Users/peet/Sources/csml/Tests/Data/sonar.csv";
// inputPath = @"C:\Users\peet.vermeulen\source\repos\csml\Tests\Data\sonar.csv";
data = CsML.Util.Matrix.FromCSV(inputPath, mapping, loadFromRow: 0);

#!csharp

dataLength = data.GetLength(0);
features = new double[dataLength, 59];
target = new double[dataLength];
for (int r=0; r < data.GetLength(0); r++)
{
    for (int c=0; c < 59; c++)
    {
        features[r, c] = data[r, c];
    }
    target[r] = data[r, 60];
}

#!csharp

profiler = new CsML.Util.Features.Profiler(features, target);
profiler.NoOutliers(features)

#!csharp

(features, target) = CsML.Util.Features.Shuffle(features, target);

#!csharp

CsML.Util.Features.ClassProportions<double>(target)

#!csharp

results = new List<double>(){};
iter = new CsML.Util.KFoldIterator(dataLength, 10);
foreach(bool[] f in iter)
{    

    Console.Write(".");
    (ftrain, ftest) = CsML.Util.Matrix.Split(features, f);
    (ttrain, ttest) = CsML.Util.Array.Split(target, f);
    rcfier = new CsML.Probability.RandomClassifier<double>();
    rcfier.Train(ftrain, ttrain);
    double[] predictions = rcfier.Predict(ftest);
    results.Add(CsML.Util.Array.ClassificationAccuracy(ttest, predictions));
}
var mean = results.Average();
results = results.Select(x => Math.Round(x, 4)).ToList();
Console.WriteLine("");
Console.WriteLine(string.Join(", ", results.ToArray()));
Console.WriteLine($"Average {mean}");

#!csharp

results = new List<double>(){};
iter = new CsML.Util.KFoldIterator(dataLength, 10);
foreach(bool[] f in iter)
{
    Console.Write(".");
    (ftrain, ftest) = CsML.Util.Matrix.Split(features, f);
    (ttrain, ttest) = CsML.Util.Array.Split(target, f);
    var tree = new CsML.Tree.BinaryTree("classify", CsML.Util.Statistics.Gini);
    tree.maxdepth = 15;
    tree.minrows = 3;
    tree.Train(ftrain, ttrain);
    double[] predictions = tree.Predict(ftest);
    results.Add(CsML.Util.Array.ClassificationAccuracy(ttest, predictions));
}
var mean = results.Average();
results = results.Select(x => Math.Round(x, 4)).ToList();
Console.WriteLine("");
Console.WriteLine(string.Join(", ", results.ToArray()));
Console.WriteLine($"Average {mean}");
