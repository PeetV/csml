<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CsML</name>
    </assembly>
    <members>
        <member name="T:CsML.Extensions.IEnumerable">
            <summary>
            Extensions on IEnumerable adding functionality or improving readability.
            </summary>
        </member>
        <member name="M:CsML.Extensions.IEnumerable.CumulativeSum(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Turn a double enumerable into cumulative sums. [1, 2, 3 ...] becomes
            [1, 3, 6 ...].
            </summary>
        </member>
        <member name="M:CsML.Extensions.IEnumerable.ElementCounts``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Count of ocurrences of each array element.
            </summary>
        </member>
        <member name="T:CsML.Forest.RandomForest">
            <summary>
            A forest of binary decision trees for classification and regression.
            </summary>
        </member>
        <member name="F:CsML.Forest.RandomForest.trees">
            <summary>The trees that make up the forest once trained.</summary>
        </member>
        <member name="F:CsML.Forest.RandomForest.treeCount">
            <summary>The number of tress in the forest.</summary>
        </member>
        <member name="F:CsML.Forest.RandomForest.minColumns">
            <summary>The number of matrix columns the model was trained on.</summary>
        </member>
        <member name="F:CsML.Forest.RandomForest.inputRecordCount">
            <summary>The number of matrix rows the model was trained on.</summary>
        </member>
        <member name="F:CsML.Forest.RandomForest.maxdepth">
            <summary>Maximum tree depth stopping condition.</summary>
        </member>
        <member name="F:CsML.Forest.RandomForest.minrows">
            <summary>Minimum rows in a tree stopping condition.</summary>
        </member>
        <member name="F:CsML.Forest.RandomForest.randomFeatures">
            <summary>
            Number of random features to use at each split point during training.
            Used to add randomisation to a random forest. Defaults to square
            root of the number of columns.
            </summary>
        </member>
        <member name="F:CsML.Forest.RandomForest.classes">
            <summary>
            The distinct class labels if creating a classification model.
            </summary>
        </member>
        <member name="F:CsML.Forest.RandomForest.purityFn">
            <summary>
            The function to use to calculate the purity of a slice of the
            target array.
            <see> See
            <seealso cref="M:CsML.Util.Statistics.Gini``1(System.Collections.Generic.IEnumerable{``0})" />
            for default function to use.
            </see>
            </summary>
        </member>
        <member name="F:CsML.Forest.RandomForest.bootstrapSampleData">
            <summary>
            Sample input data with replacement when training each tree if true.
            </summary>
        </member>
        <member name="P:CsML.Forest.RandomForest.mode">
            <summary>Mode can be either "classify" or "regress".</summary>
        </member>
        <member name="M:CsML.Forest.RandomForest.#ctor(System.String,System.Func{System.Double[],System.Double},System.Int32,System.Int32)">
            <summary>Create an untrained random forest.</summary>
        </member>
        <member name="M:CsML.Forest.RandomForest.Train(System.Double[0:,0:],System.Double[])">
            <summary>
            Train the model.
            </summary>
            <param name="matrix">The features to train the model on.</param>
            <param name="target">The target vector to train on.</param>
        </member>
        <member name="M:CsML.Forest.RandomForest.Predict(System.Double[0:,0:])">
            <summary>
            Make predictions using the model.
            </summary>
            <param name="matrix">New data to infer predictions from.</param>
        </member>
        <member name="M:CsML.Forest.RandomForest.PurityGains">
            <summary>
            Calculate the mean weighted purity gains across trees.
            </summary>
            <returns>
            An array containing purity gains in the order of feature columns.
            </returns>
        </member>
        <member name="T:CsML.Probability.Distributions">
            <summary>
            A collection of functions dealing with or to generate distributions.
            </summary>
        </member>
        <member name="M:CsML.Probability.Distributions.Binomial(System.Int32,System.Int32[],System.Double)">
            <summary>
            Calculate Binomial probabilities for a series of k values. The Binomial
            distribution is used to model the probability of a number of successes
            during a certain number of trials.
            </summary>
            <param name="n">
            Number of independent experiments, each asking a yes–no question, and 
            each with its own Boolean-valued outcome: success (with probability p).
            </param>
            <param name="ks">Arrays of k values representing number of successes.</param>
            <param name="p">Probability of experiment success.</param>
            <returns>
            An array of doubles representing the proability of each corresponding
            k values specified in the ks parameter.
            </returns>
        </member>
        <member name="M:CsML.Probability.Distributions.ProbabilityBinomial(System.Int32,System.Int32,System.Double)">
            <summary>
            Calculate a Binomial probability.
            </summary>
            <param name="n">
            Number of independent experiments, each asking a yes–no question, and 
            each with its own Boolean-valued outcome: success (with probability p).
            </param>
            <param name="k">Number of successes.</param>
            <param name="p">Probability of experiment success.</param>
        </member>
        <member name="M:CsML.Probability.Distributions.ProbabilityNormal(System.Double,System.Double,System.Double)">
            <summary>
            Calculate the probability of a value assuming a normal distribution
            defined by the mean and variance parameters.
            </summary>
        </member>
        <member name="T:CsML.Probability.Functions">
            <summary>
            A general collection of functions for probability calculations.
            </summary>
        </member>
        <member name="M:CsML.Probability.Functions.And(System.Boolean[],System.Boolean[])">
            <summary>
            Merge two boolean arrays using an And operator on elements.
            </summary>
        </member>
        <member name="M:CsML.Probability.Functions.Conditional(System.Boolean[],System.Boolean[])">
            <summary>
            Compute probability of a, conditioned on b.
            </summary>
        </member>
        <member name="M:CsML.Probability.Functions.NChooseK(System.Int32,System.Int32)">
            <summary>
            Calculate the Binomial Coefficient.
            </summary>
            From https://stackoverflow.com/a/12983878/4285191.
        </member>
        <member name="M:CsML.Probability.Functions.Or(System.Boolean[],System.Boolean[])">
            <summary>
            Merge two boolean arrays using an Or operator on elements.
            </summary>
        </member>
        <member name="M:CsML.Probability.Functions.Probability(System.Boolean[])">
            <summary>
            Compute a probability from a boolean array.
            </summary>
        </member>
        <member name="T:CsML.Probability.Sample">
            <summary>
            A collection of functions for random sampling.
            </summary>
        </member>
        <member name="M:CsML.Probability.Sample.ArrayWithoutReplacement``1(``0[],System.Int32)">
            <summary>
            Sample an array without replacement.
            </summary>
            <param name="input">The array to sample from.</param>
            <param name="count">The number of sample items.</param>
        </member>
        <member name="M:CsML.Probability.Sample.RangeWithReplacement(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sample integers in a range with replacement.
            </summary>
            <param name="minValue">Range starting value.</param>
            <param name="maxValue">Range stopping value (not included in sample).</param>
            <param name="count">The number of sample items.</param>
        </member>
        <member name="T:CsML.Probability.Shuffle">
            <summary>
            A collection of functions for shuffling things randomly.
            </summary>
        </member>
        <member name="M:CsML.Probability.Shuffle.Array``1(``0[],System.Boolean)">
            <summary>
            Shuffle an array into a random order.
            </summary>
            <param name="input">The array to shuffle.</param>
            <param name="inPlace">
            Shuffle input array if true. Otherwise return a shuffled clone.
            </param>
        </member>
        <member name="T:CsML.Probability.NaiveBayesClassifier`1">
            <summary>
            A naive Bayesian classifier (naive given assumption of column
            independence and normal distribution of features).
            </summary>
        </member>
        <member name="F:CsML.Probability.NaiveBayesClassifier`1.classProbabilities">
            <summary>
            The probability of each class, estimated from data in model training.
            </summary>
        </member>
        <member name="F:CsML.Probability.NaiveBayesClassifier`1.columnMeans">
            <summary>
            Mean values calculated from each column. The outer dictionary maps
            column indices to inner dictionaries. Inner dictionaries contain
            tuples with mean and variance as dictionary values, and class labels
            as keys (i.e. for column values related to each class label).
            </summary>
        </member>
        <member name="F:CsML.Probability.NaiveBayesClassifier`1.minColumns">
            <summary>The number of matrix columns the model was trained on.</summary>
        </member>
        <member name="M:CsML.Probability.NaiveBayesClassifier`1.#ctor">
            <summary>Create an untrained Naive Bayes classifier.</summary>
        </member>
        <member name="M:CsML.Probability.NaiveBayesClassifier`1.Train(System.Double[0:,0:],`0[])">
            <summary>
            Train the model.
            </summary>
            <param name="matrix">The features to train the model on.</param>
            <param name="target">The target vector to train on.</param>
        </member>
        <member name="M:CsML.Probability.NaiveBayesClassifier`1.Predict(System.Double[0:,0:])">
            <summary>
            Make predictions using the model.
            </summary>
            <param name="matrix">New data to infer predictions from.</param>
        </member>
        <member name="T:CsML.Probability.ProbabilityMassFunction`1">
            <summary>
            A Probability Mass Function for modelling discrete outcomes. Adapted from
            Think Bayes by Allen B. Downey.
            </summary>
        </member>
        <member name="F:CsML.Probability.ProbabilityMassFunction`1.table">
            <summary>
            A dictionary containing hypotheses as keys and corresponding probabilities
            as values.
            </summary>
        </member>
        <member name="P:CsML.Probability.ProbabilityMassFunction`1.Item(`0)">
            <summary>
            Overload the square-bracket operator to work on the table field.
            </summary>
        </member>
        <member name="P:CsML.Probability.ProbabilityMassFunction`1.hypotheses">
            <summary>Hypotheses sorted.</summary>
        </member>
        <member name="P:CsML.Probability.ProbabilityMassFunction`1.probabilities">
            <summary>Probabilities in order of hypotheses sorted.</summary>
        </member>
        <member name="P:CsML.Probability.ProbabilityMassFunction`1.zipped">
            <summary>
            Array of tuples containing each hypotheses and corresponding probability,
            in order of hypotheses sorted.
            </summary>
        </member>
        <member name="M:CsML.Probability.ProbabilityMassFunction`1.#ctor">
            <summary>
            Create an empty PMF.
            </summary>
        </member>
        <member name="M:CsML.Probability.ProbabilityMassFunction`1.#ctor(`0[])">
            <summary>
            Create a PMF from an array of hypotheses (each hypothesis is set to equal
            probability).
            </summary>
            <param name="hypotheses"></param>
        </member>
        <member name="M:CsML.Probability.ProbabilityMassFunction`1.FromBinomial(System.Int32,System.Int32[],System.Double)">
            <summary>
            Create a Binomial distribution PMF from a series of k values
            and p value.
            </summary>
            <param name="n">
            Number of independent experiments, each asking a yes–no question, and 
            each with its own Boolean-valued outcome: success (with probability p).
            </param>
            <param name="ks">Arrays of k values representing number of successes.</param>
            <param name="p">Probability of experiment success.</param>
        </member>
        <member name="M:CsML.Probability.ProbabilityMassFunction`1.FromNormal(System.Double[],System.Double,System.Double)">
            <summary>
            Create a Normal distribution PMF from a series of hypotheses values,
            mean and variance.
            </summary>
        </member>
        <member name="M:CsML.Probability.ProbabilityMassFunction`1.HighestProbability">
            <summary>
            Get the hypothesis with the highest probability, together with the
            probability value.
            </summary>
            <returns>
            A tuple containing the hypothesis and corresponding probability.
            </returns>
        </member>
        <member name="M:CsML.Probability.ProbabilityMassFunction`1.Normalise">
            <summary>
            Normalise the hypotheses table, making the probabilities add up to 1.
            </summary>
        </member>
        <member name="M:CsML.Probability.ProbabilityMassFunction`1.SumProbabilities(`0,`0,System.Boolean,System.Boolean)">
            <summary>
            Sum the probablities across a range of hypotheses. Include all values
            less than, or greater than range boundaries.
            </summary>
            <param name="lower">Lower range boundary. Can be null.</param>
            <param name="upper">Upper range boundary. Can be null.</param>
            <param name="includeLower">
            Inlude lower bounderay i.e. greater than or equal. Defaults to true.
            </param>
            <param name="includeUpper">
            Include the upper bounderay i.e. less than or equal. Defaults to false.
            </param>
        </member>
        <member name="M:CsML.Probability.ProbabilityMassFunction`1.ToSampler">
            <summary>
            Convert the PMF into a weighted random sampler, sampling the hypotheses
            using the probabilities as weights.
            </summary>
        </member>
        <member name="M:CsML.Probability.ProbabilityMassFunction`1.Update(System.Collections.Generic.Dictionary{`0,System.Double})">
            <summary>
            Update the hypotheses table (priors, P(H)) with likelihoods (P(D|H).
            </summary>
            <param name="likelihoods">A dictionary containing the likelihood for each outcome</param>
        </member>
        <member name="M:CsML.Probability.ProbabilityMassFunction`1.Update(System.Double[])">
            <summary>
            Update the hypotheses table (priors, P(H)) with likelihoods (P(D|H).
            </summary>
            <param name="likelihoods">An array of likelihood values in order of hypotheses sorted</param>
        </member>
        <member name="T:CsML.Probability.RandomClassifier`1">
            <summary>
            A classifier making a weighted random guess from potential class labels
            for benchmarking purposes.
            </summary>
        </member>
        <member name="F:CsML.Probability.RandomClassifier`1.classes">
            <summary>
            The distinct class labels from the target vector.
            </summary>
        </member>
        <member name="F:CsML.Probability.RandomClassifier`1.weights">
            <summary>
            Weights to apply to class labels. As the size of the sample increases,
            class proportions will get closer to the weights.
            </summary>
        </member>
        <member name="M:CsML.Probability.RandomClassifier`1.#ctor">
            <summary>Create an untrained model.</summary>
        </member>
        <member name="M:CsML.Probability.RandomClassifier`1.Train(System.Double[0:,0:],`0[])">
            <summary>
            Train the model.
            </summary>
            <param name="matrix">The features to train the model on.</param>
            <param name="target">The target vector to train on.</param>
        </member>
        <member name="M:CsML.Probability.RandomClassifier`1.Predict(System.Double[0:,0:])">
            <summary>
            Make predictions using the model.
            </summary>
            <param name="matrix">New data to infer predictions from.</param>
        </member>
        <member name="T:CsML.Probability.WeightedIndexSampler`1">
            <summary>
            Draw a weighted sample of class labels or array index.
            </summary>
        </member>
        <member name="M:CsML.Probability.WeightedIndexSampler`1.#ctor(`0[],System.Double[])">
            <summary>
            Create a new sampler.
            </summary>
            <param name="target">The array to draw samples from.</param>
            <param name="weights">
            The corresponding weights to apply when sampling. As the size of the sample
            increases the proportion will become closer to the weights proportions.
            </param>
        </member>
        <member name="M:CsML.Probability.WeightedIndexSampler`1.SampleIndex(System.Int32)">
            <summary>
            Sample a specified number of times, returning index numbers in
            the target array set at construction. Use SampleTarget to sample
            the target array directly.
            </summary>
            <param name="count">The number of samples to draw.</param>
            <returns>An array of index values.</returns>
        </member>
        <member name="M:CsML.Probability.WeightedIndexSampler`1.SampleTarget(System.Int32)">
            <summary>
            Sample the target array a specified number of times.
            </summary>
            <param name="count">The number of samples to draw.</param>
            <returns>An array of sample values.</returns>
        </member>
        <member name="T:CsML.Tree.BinaryNode">
            <summary>
            A binary decision tree node used to capture decision criteria for decision nodes
            or inference data for leaf nodes.
            </summary>
        </member>
        <member name="F:CsML.Tree.BinaryNode.index">
            <summary>Index of this node in list of nodes.</summary>
        </member>
        <member name="F:CsML.Tree.BinaryNode.isLeaf">
            <summary>Identify the node as a decision node vs a leaf node.</summary>
        </member>
        <member name="F:CsML.Tree.BinaryNode.columnIndex">
            <summary>Column to evaluate in a dicision node.</summary>
        </member>
        <member name="F:CsML.Tree.BinaryNode.splitPoint">
            <summary>
            Value used for split (greater than goes to yes index, else to no
            index).
            </summary>
        </member>
        <member name="F:CsML.Tree.BinaryNode.yesIndex">
            <summary>Index of yes node to go to on evaluation of split point.</summary>
        </member>
        <member name="F:CsML.Tree.BinaryNode.noIndex">
            <summary>Index of no node to go to on evaluation of split point.</summary>
        </member>
        <member name="F:CsML.Tree.BinaryNode.purityGain">
            <summary>Gain in purity on split.</summary>
        </member>
        <member name="F:CsML.Tree.BinaryNode.recordCount">
            <summary>Number of records used to calculate leaf node metrics.</summary>
        </member>
        <member name="F:CsML.Tree.BinaryNode.classCounts">
            <summary>Class counts in leaf node data.</summary>
        </member>
        <member name="F:CsML.Tree.BinaryNode.predicted">
            <summary>Class most likely from leaf node data.</summary>
        </member>
        <member name="T:CsML.Tree.BinaryTree">
            <summary>
            A binary decision tree for classification and regression.
            </summary>
        </member>
        <member name="F:CsML.Tree.BinaryTree.nodes">
            <summary>The list containing nodes in the tree once trained.</summary>
        </member>
        <member name="F:CsML.Tree.BinaryTree.minColumns">
            <summary>The number of matrix columns the model was trained on.</summary>
        </member>
        <member name="F:CsML.Tree.BinaryTree.inputRecordCount">
            <summary>The number of matrix rows the model was trained on.</summary>
        </member>
        <member name="F:CsML.Tree.BinaryTree.maxdepth">
            <summary>Maximum tree depth stopping condition.</summary>
        </member>
        <member name="F:CsML.Tree.BinaryTree.minrows">
            <summary>Minimum rows in a tree stopping condition.</summary>
        </member>
        <member name="F:CsML.Tree.BinaryTree.randomFeatures">
            <summary>
            Number of random features to use at each split point during training.
            Used to add randomisation to a random forest. Defaults to square
            root of the number of columns. Not relevant if a single tree is trained
            (ignored if less than 0).
            </summary>
        </member>
        <member name="F:CsML.Tree.BinaryTree.classes">
            <summary>
            The distinct class labels if creating a classification model.
            </summary>
        </member>
        <member name="F:CsML.Tree.BinaryTree.purityFn">
            <summary>
            The function to use to calculate the purity of a slice of the
            target array.
            <see> See
            <seealso cref="M:CsML.Util.Statistics.Gini``1(System.Collections.Generic.IEnumerable{``0})" />
            for default function to use.
            </see>
            </summary>
        </member>
        <member name="F:CsML.Tree.BinaryTree.bootstrapSampleData">
            <summary>Sample input data with replacement if true.</summary>
        </member>
        <member name="P:CsML.Tree.BinaryTree.mode">
            <summary>Mode can be either "classify" or "regress".</summary>
        </member>
        <member name="M:CsML.Tree.BinaryTree.#ctor(System.String,System.Func{System.Double[],System.Double})">
            <summary>Create an untrained model.</summary>
        </member>
        <member name="M:CsML.Tree.BinaryTree.Train(System.Double[0:,0:],System.Double[],System.Boolean)">
            <summary>
            Train the model.
            </summary>
            <param name="matrix">The features to train the model on.</param>
            <param name="target">The target vector to train on.</param>
            <param name="skipchecks">
            Skip input checks if true. Used in random forest to avoid repeated
            checking of same input data.
            </param>
        </member>
        <member name="M:CsML.Tree.BinaryTree.Predict(System.Double[0:,0:],System.Boolean)">
            <summary>
            Make predictions using the model.
            </summary>
            <param name="matrix">New data to infer predictions from.</param>
            <param name="skipchecks">
            Skip input checks if true. Used in random forest to avoid repeated
            checking of same input data.
            </param>
        </member>
        <member name="M:CsML.Tree.BinaryTree.PredictWithClassCounts(System.Double[0:,0:],System.Boolean)">
            <summary>
            Predict labels for new data and return corresponding class counts to use for
            probability estimates.
            </summary>
        </member>
        <member name="M:CsML.Tree.BinaryTree.PurityGains">
            <summary>
            Calculate the mean purity gain across nodes, weighted by the number of
            samples considered at each split as a proportion of total samples.
            </summary>
            <returns>
            An array containing purity gains in the order of feature columns.
            </returns>
        </member>
        <member name="T:CsML.Util.Array">
            <summary>A collection of array utility functions.</summary>
        </member>
        <member name="M:CsML.Util.Array.BestSplit``1(System.Double[],``0[],System.Func{``0[],System.Double})">
            <summary>
            Determine which value to split an array on to maximise the weighted gain 
            in purity when the split is applied to a corresponding target array.
            </summary>
            <param name="vector">Numeric array to test split points on.</param>
            <param name="target">Target array to find best gain in purity on split.</param>
            <param name="purityfn">Function that calculates purity of an array, for example Gini.</param>
            <returns>
            A tuple containing the best split value and the gain calculated by the gain
            function specified through the purityfn parameter.
            </returns>
        </member>
        <member name="M:CsML.Util.Array.ClassificationAccuracy``1(``0[],``0[])">
            <summary>
            Calculate classification accuracy from a predictions array compared to an
            actuals array.
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws an exception if inputs aren't the same length.
            </exception>
        </member>
        <member name="M:CsML.Util.Array.ClassificationError``1(``0[],``0[])">
            <summary>
            Calculate classification error from a predictions array compared to an
            actuals array.
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws an exception if inputs aren't the same length.
            </exception>
        </member>
        <member name="M:CsML.Util.Array.ClassificationMetrics``1(``0[],``0[])">
            <summary>
            Calculate Precision (proportion of positives predictived correctly)
            and Recall (proportion of true positives found) from a predictions
            array compared to an actuals array.
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws an exception if inputs aren't the same length.
            </exception>
        </member>
        <member name="M:CsML.Util.Array.ElementCounts``1(``0[])">
            <summary>
            Count of ocurrences of each array element.
            </summary>
            <returns>
            A dictionary containing array elements as keys and element counts as values.
            </returns>
        </member>
        <member name="M:CsML.Util.Array.Split``1(``0[],System.Boolean[])">
            <summary>
            Split an array using a boolean filter array, with related true values 
            going to the left and false values going to the right.
            </summary>
        </member>
        <member name="T:CsML.Util.Features">
            <summary>
            A collection of functions that do work on model training inputs, comprising a matrix of
            features and a target variable array.
            </summary>
        </member>
        <member name="M:CsML.Util.Features.Bootstrap(System.Double[0:,0:],System.Double[])">
            <summary>
            Bootstrap sample from feature matrix and correspondnig target array, with
            replacement, e.g. to add ramdomisation to a Random Forest.
            </summary>
            <returns>
            A new matrix and target array containing bootstrap samples.
            </returns>
            <exception cref="T:System.ArgumentException">
            Throws an exception if inputs aren't the same length.
            </exception>
        </member>
        <member name="M:CsML.Util.Features.Shuffle(System.Double[0:,0:],System.Double[])">
            <summary>
            Shuffle a matrix containing features and a target array maintaining the
            relationship between matrix rows and array items.
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws an exception if inputs aren't the same length.
            </exception>
        </member>
        <member name="M:CsML.Util.Features.Split(System.Double[0:,0:],System.Double[],System.Double)">
            <summary>
            Split a matrix containing features and a target variable array
            into train and test sets using a ratio between 0 and 1, e.g. 0.7
            places 70% into train and keeps 30% for test.
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws an exception if inputs aren't the same length or if `ratio` is
            not between 0 and 1.
            </exception>
        </member>
        <member name="T:CsML.Util.Matrix">
            <summary>A collection of matrix utility functions, using 2D arrays.</summary>
        </member>
        <member name="M:CsML.Util.Matrix.BestSplit``1(System.Double[0:,0:],``0[],System.Func{``0[],System.Double},System.Int32)">
            <summary>
            Determine which value to split a matrix (two dimensional array) on to
            maximise the weighted gain in purity when the split is applied to a
            corresponding target array.
            </summary>
            <param name="matrix">Numeric two dimensional array to test split points on.</param>
            <param name="target">Target array to find best gain in purity on split.</param>
            <param name="purityfn">Function that calculates purity of an array.</param>
            <param name="randomFeatures">
            If randomFeatures is greater than 0, select a random number of specified columns
            to include (used to add randomisation to a Random Forest).
            </param>
            <returns>
            A tuple containing the index of the column with best gain and a tuple
            containing the split value and gain calculated by the gain
            function specified through the purityfn parameter.
            </returns>
        </member>
        <member name="M:CsML.Util.Matrix.Equal(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Compare two matrixes for equality.
            </summary>
        </member>
        <member name="M:CsML.Util.Matrix.FromCSV(System.String,System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.Dictionary{System.String,System.Double}},System.String,System.Int32)">
            <summary>
            Create a two dimensional double array from a CSV file.
            </summary>
            <param name="inputfile">Path of the CSV input file.</param>
            <param name="mapping">
            A dictionary used to convert string columns to numeric values of the format
            { {column id , { {string val, numeric val}, {string val, numeric val} ...}.
            </param>
            <param name="separator">The field delimeter.</param>
            <param name="loadFromRow">
            The index of the row to load from, e.g. 1 skips the first row.
            </param>
        </member>
        <member name="M:CsML.Util.Matrix.FromList2D``1(System.Collections.Generic.List{``0[]})">
            <summary>
            Create a two dimensional array from a List.
            </summary>
        </member>
        <member name="M:CsML.Util.Matrix.GetRow(System.Double[0:,0:],System.Int32,System.Boolean)">
            <summary>
            Extract a row from a 2D array.
            </summary>
            <param name="matrix">The matrix to extract a row from.</param>
            <param name="index">The row number to extract.</param>
            <param name="useSpan">
            Use Span2D to extract the row if true e.g. set to false in 
            parallel code if it doesn't accept Span2D.
            </param> 
        </member>
        <member name="M:CsML.Util.Matrix.Split(System.Double[0:,0:],System.Int32,System.Double)">
            <summary>
            Split a matrix (two dimensional double array) using a column
            index and split point.
            </summary>
            <param name="matrix">Numeric two dimensional array to split.</param>
            <param name="columnIndex">Column to split the matrix on.</param>
            <param name="splitPoint">
            Value to split the column on (greater than value splits left;
            less than value splits right).
            </param>
            <returns>
            Returns a Tuple containing a Tuple with left and right splits
            and boolean filter array. The filter array can be applied to
            other arrays using Split1D.
            </returns>
        </member>
        <member name="M:CsML.Util.Matrix.Split(System.Double[0:,0:],System.Boolean[])">
            <summary>
            Split a matrix using a boolean filer matrix.
            </summary>
        </member>
        <member name="T:CsML.Util.Statistics">
            <summary>A collection of statistics utility functions.</summary>
        </member>
        <member name="M:CsML.Util.Statistics.Gini``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Calculate the Gini index of a set of discrete values.
            </summary>
        </member>
        <member name="M:CsML.Util.Statistics.RSquared(System.Double[],System.Double[],System.Nullable{System.Int32})">
            <summary>
            Calculate the r-squared and adjusted r-squared of an actuals array vs predictions.
            <see> See
            <seealso href=" https://en.wikipedia.org/wiki/Coefficient_of_determination">Wikipedia</seealso>
            Coefficient Of Determination.
            </see>
            </summary>
            <param name="actuals">Actual values to compare with predicted values.</param>
            <param name="predictions">Predicted values to compare with actual values.</param>
            <param name="p">
            p is the number of explanatory terms used in the regression to calculated adjusted r-squared
            (returns 0 for adjusted r-squared if p is null).
            </param>
            <returns>A tuple containing r-squared and adjusted r-squared.</returns>
        </member>
        <member name="M:CsML.Util.Statistics.SSE(System.Double[],System.Double[])">
            <summary>
            Calculate the sum of the squared difference between two arrays.
            </summary>
        </member>
        <member name="M:CsML.Util.Statistics.StdevP(System.Double[])">
            <summary>
            Calculate the population standard deviation from an input array.
            </summary>
        </member>
        <member name="M:CsML.Util.Statistics.Variance(System.Double[])">
            <summary>
            Calculate the variance of a double array (average of the squared
            deviations from the mean).
            </summary>
        </member>
        <member name="T:CsML.Util.KFoldIterator">
            <summary>
            A class that yields a boolean filter containing train vs test splits for k-fold
            cross validation. E.g. a 10 fold iterator will iteratively yield 10 train / 90
            test, 10 test / 10 train / 80 test etc in folds.
            </summary>
        </member>
        <member name="F:CsML.Util.KFoldIterator.size">
            <summary>The number of records to split into folds.</summary>
        </member>
        <member name="F:CsML.Util.KFoldIterator.kfolds">
            <summary>The number of folds to iterate over.</summary>
        </member>
        <member name="F:CsML.Util.KFoldIterator.foldIndeces">
            <summary>The start and end index values of each fold.</summary>
        </member>
        <member name="M:CsML.Util.KFoldIterator.#ctor(System.Int32,System.Int32)">
            <summary>Create a new k-fold iterator.</summary>
        </member>
        <member name="M:CsML.Util.KFoldIterator.GetEnumerator">
            <summary>Get the IEnumerator to iterate over.</summary>
        </member>
    </members>
</doc>
